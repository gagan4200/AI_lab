public class MyCalculator { 
    public Double val1 { get; set; }
    public Double val2 { get; set; }
    public Double result { get; set; }
    public String func { get; set; }

    // Constructor with default values
    public MyCalculator() {
        val1 = 0;
        val2 = 0;
        result = 0;
        func = 'add'; // Default operation
    }

    // Method to populate dropdown options
    public List<SelectOption> getOperations() {
        List<SelectOption> options = new List<SelectOption>();
        options.add(new SelectOption('add', 'Addition (+)'));
        options.add(new SelectOption('sub', 'Subtraction (-)'));
        options.add(new SelectOption('mul', 'Multiplication (×)'));
        options.add(new SelectOption('div', 'Division (/)'));
        options.add(new SelectOption('mod', 'Modulo (%)'));
        return options;
    }

    // Calculation method
    public void finds() {
        if (func == 'add') {
            result = val1 + val2;
        } else if (func == 'sub') {
            result = val1 - val2;
        } else if (func == 'mul') {
            result = val1 * val2;
        } else if (func == 'div') {
            if (val2 == 0) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Division by zero is not allowed.'));
                return;
            }
            result = val1 / val2;
        } else if (func == 'mod') {
            if (val2 == 0) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Modulo by zero is not allowed.'));
                return;
            }
            Integer temp = Math.mod(Integer.valueOf(val1), Integer.valueOf(val2));
            result = Double.valueOf(temp);
        } else {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Invalid operation selected.'));
        }
    }
}






<apex:page controller="MyCalculator">
    <apex:form>
        <apex:pageBlock title="Simple Calculator">
            <apex:pageBlockSection columns="2">
                <apex:inputText value="{!val1}" label="First Number"/>
                <apex:inputText value="{!val2}" label="Second Number"/>
                
                <apex:selectList value="{!func}" size="1" label="Select Operation">
                    <apex:selectOptions value="{!operations}"/>
                </apex:selectList>

                <apex:commandButton value="Calculate" action="{!finds}" rerender="resultBlock"/>
            </apex:pageBlockSection>

            <apex:outputPanel id="resultBlock">
                <apex:pageBlockSection title="Result">
                    <apex:outputText value="Result: {!result}" style="font-weight:bold; font-size:16px;"/>
                </apex:pageBlockSection>
            </apex:outputPanel>
        </apex:pageBlock>
    </apex:form>
</apex:page>








<apex:page controller="MyCalculator">
    <apex:form>
        <apex:pageBlock title="Simple Calculator">
            <apex:pageBlockSection columns="2">
                <apex:inputText value="{!val1}" label="First Number"/>
                <apex:inputText value="{!val2}" label="Second Number"/>
                
                <apex:selectList value="{!func}" size="1" label="Select Operation">
                    <apex:selectOptions value="{!operations}"/>
                </apex:selectList>

                <apex:commandButton value="Calculate" action="{!finds}" rerender="resultBlock"/>
            </apex:pageBlockSection>

            <apex:outputPanel id="resultBlock">
                <apex:pageBlockSection title="Result">
                    <apex:outputText value="Result: {!result}" style="font-weight:bold; font-size:16px;"/>
                </apex:pageBlockSection>
            </apex:outputPanel>
        </apex:pageBlock>
    </apex:form>
</apex:page>




public class MyCalculator { 
    public Double val1 { get; set; }
    public Double val2 { get; set; }
    public Double result { get; set; }
    public String func { get; set; }

    // Constructor with default values
    public MyCalculator() {
        val1 = 0;
        val2 = 0;
        result = 0;
        func = 'add'; // Default operation
    }

    // Method to populate dropdown options
    public List<SelectOption> getOperations() {
        List<SelectOption> options = new List<SelectOption>();
        options.add(new SelectOption('add', 'Addition (+)'));
        options.add(new SelectOption('sub', 'Subtraction (-)'));
        options.add(new SelectOption('mul', 'Multiplication (×)'));
        options.add(new SelectOption('div', 'Division (/)'));
        options.add(new SelectOption('mod', 'Modulo (%)'));
        return options;
    }

    // Calculation method
    public void finds() {
        if (func == 'add') {
            result = val1 + val2;
        } else if (func == 'sub') {
            result = val1 - val2;
        } else if (func == 'mul') {
            result = val1 * val2;
        } else if (func == 'div') {
            if (val2 == 0) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Division by zero is not allowed.'));
                return;
            }
            result = val1 / val2;
        } else if (func == 'mod') {
            if (val2 == 0) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Modulo by zero is not allowed.'));
                return;
            }
            Integer temp = Math.mod(Integer.valueOf(val1), Integer.valueOf(val2));
            result = Double.valueOf(temp);
        } else {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Invalid operation selected.'));
        }
    }
}



<apex:page controller="StudentController1">
    <apex:form >
        <!-- Form for creating a new student -->
        <apex:pageBlock title="Create New Student">
            <apex:pageBlockSection columns="2">
                <apex:inputField value="{!newStudent.Name}" label="Student Name"/>
                <apex:inputField value="{!newStudent.age__c}" label="Age"/>
                <apex:inputField value="{!newStudent.grade__c}" label="Grade"/>
            </apex:pageBlockSection>
            <!-- Submit button to save the student -->
            <apex:commandButton value="Save Student" action="{!saveStudent}"/>
        </apex:pageBlock>

        <!-- Display existing students -->
        <apex:pageBlock title="Existing Students">
            <apex:pageBlockTable value="{!students}" var="stu">
                <apex:column value="{!stu.Name}" headerValue="Student Name"/>
                <apex:column value="{!stu.age__c}" headerValue="Age"/>
                <apex:column value="{!stu.grade__c}" headerValue="Grade"/>
                <apex:column >
                    <!-- Button to update student -->
                    <apex:commandButton value="Update" action="{!updateStudent}" />
                </apex:column>
            </apex:pageBlockTable>
        </apex:pageBlock>
    </apex:form>
</apex:page>



public class BookController1 {
    // List to hold books
    public List<Book__c> books { get; set; }
    // Variable to hold new book information
    public Book__c newBook { get; set; }

    // Constructor to fetch existing books from Salesforce
    public BookController1() {
        books = [SELECT Id, Title__c, Author__c, Publication_Year__c FROM Book__c LIMIT 10];
        newBook = new Book__c(); // Initialize the new book object
    }

    // Method to save a new book
    public PageReference saveBook() {
        insert newBook; // Insert the new book into Salesforce
        books.add(newBook); // Add the new book to the list of books
        newBook = new Book__c(); // Reset the form for the next input
        return null; // Stay on the same page
    }

    // Method to update book details
    public PageReference updateBook() {
        update books; // Update all books in Salesforce
        return null; // Stay on the same page
    }
}



apex:page controller="BookController">
    <apex:form >
        <!-- Form to create a new book -->
        <apex:pageBlock title="Create New Book">
            <apex:pageBlockSection columns="2">
                <!-- Input fields for book title, author, and publication year -->
                <apex:inputField value="{!newBook.Title__c}" label="Book Title"/>
                <apex:inputField value="{!newBook.Author__c}" label="Author"/>
                <apex:inputField value="{!newBook.Publication_Year__c}" label="Publication Year"/>
            </apex:pageBlockSection>
            <!-- Save button -->
            <apex:commandButton value="Save Book" action="{!saveBook}"/>
        </apex:pageBlock>

        <!-- Display existing books -->
        <apex:pageBlock title="Existing Books">
            <apex:pageBlockTable value="{!books}" var="book">
                <apex:column value="{!book.Title__c}" headerValue="Book Title"/>
                <apex:column value="{!book.Author__c}" headerValue="Author"/>
                <apex:column value="{!book.Publication_Year__c}" headerValue="Publication Year"/>
                <apex:column >
                    <!-- Update button for each book -->
                    <apex:commandButton value="Update" action="{!updateBook}" />
                </apex:column>
            </apex:pageBlockTable>
        </apex:pageBlock>
    </apex:form>
</apex:page>




public class StudentController1{
    // List to hold student records
    public List<Student__c> students { get; set; }
    public Student__c newStudent { get; set; }

    // Constructor to initialize the students list and new student record
    public StudentController1() {
        students = [SELECT Id, Name, Age__c, Grade__c FROM Student__c LIMIT 10]; // Fetches students from Salesforce
        newStudent = new Student__c(); // Empty student record for input form
    }

    // Method to save a new student
    public PageReference saveStudent() {
        insert newStudent; // Inserts the new student record into Salesforce
        students.add(newStudent); // Add the new student to the list of students
        newStudent = new Student__c(); // Reset the form for the next input
        return null; // Returns to the same page
    }

    // Method to update an existing student's details
    public PageReference updateStudent() {
        update students; // Updates the list of students in Salesforce
        return null;
    }
}



